1=================================
import java.io.File;
import java.util.Scanner;

public class seta1 {
    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println("Please provide a file or directory path as a command line argument.");
            return;
        }

        File file = new File(args[0]);
        Scanner scanner = new Scanner(System.in);

        if (file.isDirectory()) {
            System.out.println("It is a directory. Listing contents:");
            String[] contents = file.list();
            int fileCount = 0;

            for (String item : contents) {
                System.out.println(item);
                File currentFile = new File(file, item);
                if (currentFile.isFile()) {
                    fileCount++;
                }
            }

            System.out.println("Total number of files: " + fileCount);
            System.out.print("Do you want to delete all .txt files in this directory? (yes/no): ");
            String response = scanner.nextLine();

            if (response.equalsIgnoreCase("yes")) {
                for (String item : contents) {
                    File currentFile = new File(file, item);
                    if (currentFile.isFile() && item.endsWith(".txt")) {
                        currentFile.delete();
                        System.out.println("Deleted: " + item);
                    }
                }
            }
        } else if (file.isFile()) {
            System.out.println("It is a file. File information:");
            System.out.println("Path: " + file.getAbsolutePath());
            System.out.println("Size: " + file.length() + " bytes");
            System.out.println("Readable: " + file.canRead());
            System.out.println("Writable: " + file.canWrite());
            System.out.println("Executable: " + file.canExecute());
        } else {
            System.out.println("The specified path is neither a file nor a directory.");
        }

        scanner.close();
    }
}
2===================================================================================================
import java.io.*;
import java.util.*;

class Phone {
    String name, phno;

    Phone(String nm, String ph) {
        name = nm;
        phno = ph;
    }

    public String toString() {
        return name + " " + phno;
    }

    public static void search(Phone[] arr, String s) {
        for (Phone phone : arr) {
            if (phone.name.equalsIgnoreCase(s)) { // Case insensitive search
                System.out.println(phone);
                return;
            }
        }
        System.out.println("No Records Found");
    }
}

class SetA2 {
    public static void main(String args[]) throws IOException {
        File f = new File("phone.dat");
        RandomAccessFile rf = new RandomAccessFile(f, "rw");
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter no.of Customers");
        int n = sc.nextInt();
        sc.nextLine(); // Consume newline

        System.out.println("Enter Records:\n<name> <phone no> :");
        for (int i = 0; i < n; i++) {
            rf.writeBytes(sc.nextLine() + "\n");
        }
        rf.close();

        Phone[] p = new Phone[n];
        RandomAccessFile rf1 = new RandomAccessFile(f, "r");
        for (int i = 0; i < n; i++) {
            String[] data = rf1.readLine().split(" ");
            if (data.length >= 2) { // Ensure there are at least two elements
                p[i] = new Phone(data[0], data[1]);
            }
        }
        rf1.close();

        int ch;
        do {
            System.out.println("Menu :\n1: Search by name\n2: Add Record\n3: Exit\nEnter your Choice :");
            ch = sc.nextInt();
            sc.nextLine(); // Consume newline
            switch (ch) {
                case 1:
                    System.out.println("Enter name to be searched");
                    Phone.search(p, sc.nextLine());
                    break;
                case 2:
                    rf = new RandomAccessFile(f, "rw");
                    rf.seek(rf.length()); // Move to the end of the file to append
                    System.out.println("Enter Records:\n<name> <phone no> :");
                    rf.writeBytes(sc.nextLine() + "\n");
                    rf.close();
                    break;
                case 3:
                    System.exit(0);
            }
        } while (ch != 3);
    }
}
3=============================================================================================
import java.io.*;
import java.util.*;

class Item 
{
    String id, name;
    int qty;
    double price;

    Item(String id, String name, int qty, double price) 
    {
        this.id = id;
        this.name = name;
        this.qty = qty;
        this.price = price;
    }

    double totalCost()
     {
        return qty * price;
    }

    @Override
    public String toString()
     {
        return String.format("ID: %s, Name: %s, Qty: %d, Price: %.2f, Total Cost: %.2f", id, name, qty, price, totalCost());
    }
}

public class setb1
 {
    private static final String FILE_NAME = "item.dat";

    public static void main(String[] args) throws IOException
     {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of records: ");
        int n =sc.nextInt();
        Item[] items = new Item[n];

        // Write records to file
        try
         (FileWriter fw = new FileWriter(FILE_NAME)) 
         {
            System.out.println("Enter Records:\n<id> <name> <qty> <price> :");
            for (int i = 0; i < n; i++) 
            {
                String[] record =sc.nextLine().split(" ");
                fw.write(String.join(" ", record) + "\n");
                items[i] = new Item(record[0], record[1], Integer.parseInt(record[2]), Double.parseDouble(record[3]));
            }
        }

        int choice;
        do {
            System.out.println("\nMenu:");
            System.out.println("1: Search for an item by name");
            System.out.println("2: Find costliest item");
            System.out.println("3: Display all items and total cost");
            System.out.println("4: Exit");
            System.out.print("Choice: ");
            choice = sc.nextInt();

            switch (choice)
             {
                case 1:
                    System.out.print("Enter item name to search: ");
                    String searchName =sc.nextLine();
                    searchItemByName(items, searchName);
                    break;
                case 2:
                    findCostliestItem(items);
                    break;
                case 3:
                    displayAllItems(items);
                    break;
                case 4:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid Option");
            }
        } while (choice != 4);
    }

    private static void searchItemByName(Item[] items, String name)
     {
        for (Item item : items) {
            if (item.name.equalsIgnoreCase(name)) {
                System.out.println("Item found: " + item);
                return;
            }
        }
        System.out.println("No Records Found");
    }

    private static void findCostliestItem(Item[] items) {
        Item costliest = Arrays.stream(items).max(Comparator.comparingDouble(i -> i.price)).orElse(null);
        if (costliest != null) {
            System.out.println("Costliest Item: " + costliest);
        } else {
            System.out.println("No items available.");
        }
    }

    private static void displayAllItems(Item[] items) {
        double totalCost = 0;
        System.out.println("Items:");
        for (Item item : items) {
            System.out.println(item);
            totalCost += item.totalCost();
        }
        System.out.printf("Total cost of all items: %.2f%n", totalCost);
    }
}
4================================================================================

import java.io.*;
import java.nio.file.*;

public class FileCopyWithComments {
    public static void main(String[] args) {
        // Accept two file names as input
        if (args.length < 2) {
            System.out.println("Usage: java FileCopyWithComments <source_file> <destination_file>");
            return;
        }

        String sourceFile = args[0];
        String destinationFile = args[1];

        // Author name and date
        String authorName = "Author: Your Name"; // Replace "Your Name" with your actual name
        String date = "Date: " + java.time.LocalDate.now();

        try (BufferedReader reader = new BufferedReader(new FileReader(sourceFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(destinationFile))) {

            // Write comments at the beginning of the file
            writer.write("// " + authorName);
            writer.newLine();
            writer.write("// " + date);
            writer.newLine();
            writer.write("// File content begins below:");
            writer.newLine();

            // Copy contents from the source file to the destination file
            String line;
            while ((line = reader.readLine()) != null) {
                writer.write(line);
                writer.newLine();
            }

            // Add end of file comment
            writer.write("// End of file");
            writer.newLine();

            System.out.println("File copied successfully with comments added.");
        } catch (IOException e) {
            System.err.println("Error occurred: " + e.getMessage());
        }
    }
}
//Run the program, providing the source file and destination file as arguments:  -----java FileCopyWithComments source.txt destination.txt
 
//

5=======================================================================================================
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileStringSearch {
    public static void main(String[] args) {
        // Check if the correct number of arguments are provided
        if (args.length < 2) {
            System.out.println("Usage: java FileStringSearch [option] <string> <filename>");
            return;
        }

        String option = args[0];
        String searchString = args[1];
        String fileName = args[2];

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            int count = 0;

            while ((line = br.readLine()) != null) {
                boolean containsString = line.contains(searchString);

                // If no option is passed, print lines containing the string
                if (option.equals("")) {
                    if (containsString) {
                        System.out.println(line);
                    }
                }
                // If option -c is passed, count the lines containing the string
                else if (option.equals("-c")) {
                    if (containsString) {
                        count++;
                    }
                }
                // If option -v is passed, print lines not containing the string
                else if (option.equals("-v")) {
                    if (!containsString) {
                        System.out.println(line);
                    }
                }
            }

            // If option -c is passed, print the count of lines containing the string
            if (option.equals("-c")) {
                System.out.println("Count of lines containing \"" + searchString + "\": " + count);
            }

        } catch (IOException e) {
            System.out.println("An error occurred while reading the file: " + e.getMessage());
        }
    }
}
//To print all lines containing the string no option        java FileStringSearch "<string>" <filename>
//To count lines containing the string:                     java FileStringSearch -c "<string>" <filename>
//To print all lines containing the word "Java":            java FileStringSearch "Java" example.txt